package Investor.service.project.Services;

import java.time.Year;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import Investor.service.project.Entities.Investor;
import Investor.service.project.Entities.RetirementAccount;
import Investor.service.project.Entities.Withdrawal;
import Investor.service.project.Repositories.WithdrawalRepo;

@Service
public class WithdrawalService {
	
	
	@Autowired
	private WithdrawalRepo withdrawalRepo;
	@Autowired
	private InvestorService investorService;
	@Autowired
	private RetirementAccountService retirementAccountService;
	
	
	public Withdrawal initiateinitiateWithdrawal(Withdrawal withdrawal) {
		
		Investor investor = investorService.findByInvestorId(withdrawal.getInvestorId());
		RetirementAccount retirementAccount = retirementAccountService.findByInvestorId(withdrawal.getInvestorId());
		
        String firstFourNumbers = investor.getInvestorId().substring(0, Math.min(investor.getInvestorId().length(), 4));
        int investorsYear = Integer.parseInt(firstFourNumbers);
        Year currentYear = Year.now();
        int currentYearValue = currentYear.getValue();
        
        int investorsAge = currentYearValue - investorsYear;
        
        
        
        if(withdrawal.getProductType().equalsIgnoreCase("RetirementAccount")) {
        	if(isOlderThan65(investorsAge)) {
        		
        	}
        }
        
        
	}
	
	
	private boolean isOlderThan65(int age) {
		return age > 65 ? true : false;
	}
	
	private boolean isOverdrawn(long withdrawalAmount, long balanceAmount) {
		return withdrawalAmount > balanceAmount ? true : false;
	}
	
	  public boolean canWithdraw(long withdrawalAmount, long balance) {
	        // Calculate 90% of the current balance
	        long maxWithdrawalAmount = (long) (balance * 0.90);

	        // Check if the withdrawal amount is less than or equal to 90% of the current balance
	        return withdrawalAmount <= maxWithdrawalAmount;
	    }

}
